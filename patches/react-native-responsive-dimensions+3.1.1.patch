diff --git a/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js b/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js
index 12b8a6c..3e44e9f 100644
--- a/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js
+++ b/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js
@@ -1,2 +1,142 @@
-"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.useResponsiveScreenFontSize=exports.useResponsiveScreenWidth=exports.useResponsiveScreenHeight=exports.useResponsiveFontSize=exports.useResponsiveWidth=exports.useResponsiveHeight=exports.responsiveScreenFontSize=exports.responsiveScreenWidth=exports.responsiveScreenHeight=exports.responsiveFontSize=exports.responsiveWidth=exports.responsiveHeight=exports.useDimensionsChange=void 0;var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react=require("react");var _reactNative=require("react-native");var useDimensionsListener=function useDimensionsListener(){var _useState=(0,_react.useState)(_reactNative.Dimensions.get("screen")),_useState2=(0,_slicedToArray2.default)(_useState,2),screenDimension=_useState2[0],setScreenDimension=_useState2[1];var _useState3=(0,_react.useState)(_reactNative.Dimensions.get("window")),_useState4=(0,_slicedToArray2.default)(_useState3,2),windowDimension=_useState4[0],setWindowDimension=_useState4[1];(0,_react.useEffect)(function(){function handleDimensionChange(_ref){var window=_ref.window,screen=_ref.screen;setWindowDimension(window);setScreenDimension(screen);}_reactNative.Dimensions.addEventListener("change",handleDimensionChange);return function(){_reactNative.Dimensions.removeEventListener("change",handleDimensionChange);};},[]);return{screen:screenDimension,window:windowDimension};};var percentageCalculation=function percentageCalculation(max,val){return max*(val/100);};var fontCalculation=function fontCalculation(height,width,val){var widthDimension=height>width?width:height;var aspectRatioBasedHeight=16/9*widthDimension;return percentageCalculation(Math.sqrt(Math.pow(aspectRatioBasedHeight,2)+Math.pow(widthDimension,2)),val);};var useDimensionsChange=function useDimensionsChange(effect){var hasMountRef=(0,_react.useRef)(false);var dimensions=useDimensionsListener();(0,_react.useEffect)(function(){if(hasMountRef.current){var destroy=effect(dimensions);var cleanUp=function cleanUp(){return null;};if(typeof destroy==="function"){cleanUp=destroy;}return function(){return cleanUp();};}else{hasMountRef.current=true;}},[dimensions,effect]);};exports.useDimensionsChange=useDimensionsChange;var responsiveHeight=function responsiveHeight(h){var _Dimensions$get=_reactNative.Dimensions.get("window"),height=_Dimensions$get.height;return percentageCalculation(height,h);};exports.responsiveHeight=responsiveHeight;var responsiveWidth=function responsiveWidth(w){var _Dimensions$get2=_reactNative.Dimensions.get("window"),width=_Dimensions$get2.width;return percentageCalculation(width,w);};exports.responsiveWidth=responsiveWidth;var responsiveFontSize=function responsiveFontSize(f){var _Dimensions$get3=_reactNative.Dimensions.get("window"),height=_Dimensions$get3.height,width=_Dimensions$get3.width;return fontCalculation(height,width,f);};exports.responsiveFontSize=responsiveFontSize;var responsiveScreenHeight=function responsiveScreenHeight(h){var _Dimensions$get4=_reactNative.Dimensions.get("screen"),height=_Dimensions$get4.height;return percentageCalculation(height,h);};exports.responsiveScreenHeight=responsiveScreenHeight;var responsiveScreenWidth=function responsiveScreenWidth(w){var _Dimensions$get5=_reactNative.Dimensions.get("screen"),width=_Dimensions$get5.width;return percentageCalculation(width,w);};exports.responsiveScreenWidth=responsiveScreenWidth;var responsiveScreenFontSize=function responsiveScreenFontSize(f){var _Dimensions$get6=_reactNative.Dimensions.get("screen"),height=_Dimensions$get6.height,width=_Dimensions$get6.width;return fontCalculation(height,width,f);};exports.responsiveScreenFontSize=responsiveScreenFontSize;var useResponsiveHeight=function useResponsiveHeight(h){var height=useDimensionsListener().window.height;return percentageCalculation(height,h);};exports.useResponsiveHeight=useResponsiveHeight;var useResponsiveWidth=function useResponsiveWidth(w){var width=useDimensionsListener().window.width;return percentageCalculation(width,w);};exports.useResponsiveWidth=useResponsiveWidth;var useResponsiveFontSize=function useResponsiveFontSize(f){var _useDimensionsListene=useDimensionsListener().window,height=_useDimensionsListene.height,width=_useDimensionsListene.width;return fontCalculation(height,width,f);};exports.useResponsiveFontSize=useResponsiveFontSize;var useResponsiveScreenHeight=function useResponsiveScreenHeight(h){var height=useDimensionsListener().screen.height;return percentageCalculation(height,h);};exports.useResponsiveScreenHeight=useResponsiveScreenHeight;var useResponsiveScreenWidth=function useResponsiveScreenWidth(w){var width=useDimensionsListener().screen.width;return percentageCalculation(width,w);};exports.useResponsiveScreenWidth=useResponsiveScreenWidth;var useResponsiveScreenFontSize=function useResponsiveScreenFontSize(f){var _useDimensionsListene2=useDimensionsListener().screen,height=_useDimensionsListene2.height,width=_useDimensionsListene2.width;return fontCalculation(height,width,f);};exports.useResponsiveScreenFontSize=useResponsiveScreenFontSize;
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.useResponsiveWidth = exports.useResponsiveScreenWidth = exports.useResponsiveScreenHeight = exports.useResponsiveScreenFontSize = exports.useResponsiveHeight = exports.useResponsiveFontSize = exports.useDimensionsChange = exports.responsiveWidth = exports.responsiveScreenWidth = exports.responsiveScreenHeight = exports.responsiveScreenFontSize = exports.responsiveHeight = exports.responsiveFontSize = void 0;
+var _react = require("react");
+var _reactNative = require("react-native");
+const useDimensionsListener = () => {
+  const [screenDimension, setScreenDimension] = (0, _react.useState)(_reactNative.Dimensions.get("screen"));
+  const [windowDimension, setWindowDimension] = (0, _react.useState)(_reactNative.Dimensions.get("window"));
+  (0, _react.useEffect)(() => {
+    function handleDimensionChange(_ref) {
+      let {
+        window,
+        screen
+      } = _ref;
+      setWindowDimension(window);
+      setScreenDimension(screen);
+    }
+    const listener = _reactNative.Dimensions.addEventListener("change", handleDimensionChange);
+    return () => {
+      listener.remove();
+    };
+  }, []);
+  return {
+    screen: screenDimension,
+    window: windowDimension
+  };
+};
+const percentageCalculation = (max, val) => max * (val / 100);
+const fontCalculation = (height, width, val) => {
+  const widthDimension = height > width ? width : height;
+  const aspectRatioBasedHeight = 16 / 9 * widthDimension;
+  return percentageCalculation(Math.sqrt(Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)), val);
+};
+const useDimensionsChange = effect => {
+  const hasMountRef = (0, _react.useRef)(false);
+  const dimensions = useDimensionsListener();
+  (0, _react.useEffect)(() => {
+    if (hasMountRef.current) {
+      const destroy = effect(dimensions);
+      let cleanUp = () => null;
+      if (typeof destroy === "function") {
+        cleanUp = destroy;
+      }
+      return () => cleanUp();
+    } else {
+      hasMountRef.current = true;
+    }
+  }, [dimensions, effect]);
+};
+exports.useDimensionsChange = useDimensionsChange;
+const responsiveHeight = h => {
+  const {
+    height
+  } = _reactNative.Dimensions.get("window");
+  return percentageCalculation(height, h);
+};
+exports.responsiveHeight = responsiveHeight;
+const responsiveWidth = w => {
+  const {
+    width
+  } = _reactNative.Dimensions.get("window");
+  return percentageCalculation(width, w);
+};
+exports.responsiveWidth = responsiveWidth;
+const responsiveFontSize = f => {
+  const {
+    height,
+    width
+  } = _reactNative.Dimensions.get("window");
+  return fontCalculation(height, width, f);
+};
+exports.responsiveFontSize = responsiveFontSize;
+const responsiveScreenHeight = h => {
+  const {
+    height
+  } = _reactNative.Dimensions.get("screen");
+  return percentageCalculation(height, h);
+};
+exports.responsiveScreenHeight = responsiveScreenHeight;
+const responsiveScreenWidth = w => {
+  const {
+    width
+  } = _reactNative.Dimensions.get("screen");
+  return percentageCalculation(width, w);
+};
+exports.responsiveScreenWidth = responsiveScreenWidth;
+const responsiveScreenFontSize = f => {
+  const {
+    height,
+    width
+  } = _reactNative.Dimensions.get("screen");
+  return fontCalculation(height, width, f);
+};
+exports.responsiveScreenFontSize = responsiveScreenFontSize;
+const useResponsiveHeight = h => {
+  const {
+    height
+  } = useDimensionsListener().window;
+  return percentageCalculation(height, h);
+};
+exports.useResponsiveHeight = useResponsiveHeight;
+const useResponsiveWidth = w => {
+  const {
+    width
+  } = useDimensionsListener().window;
+  return percentageCalculation(width, w);
+};
+exports.useResponsiveWidth = useResponsiveWidth;
+const useResponsiveFontSize = f => {
+  const {
+    height,
+    width
+  } = useDimensionsListener().window;
+  return fontCalculation(height, width, f);
+};
+exports.useResponsiveFontSize = useResponsiveFontSize;
+const useResponsiveScreenHeight = h => {
+  const {
+    height
+  } = useDimensionsListener().screen;
+  return percentageCalculation(height, h);
+};
+exports.useResponsiveScreenHeight = useResponsiveScreenHeight;
+const useResponsiveScreenWidth = w => {
+  const {
+    width
+  } = useDimensionsListener().screen;
+  return percentageCalculation(width, w);
+};
+exports.useResponsiveScreenWidth = useResponsiveScreenWidth;
+const useResponsiveScreenFontSize = f => {
+  const {
+    height,
+    width
+  } = useDimensionsListener().screen;
+  return fontCalculation(height, width, f);
+};
+exports.useResponsiveScreenFontSize = useResponsiveScreenFontSize;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.flow b/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.flow
index a0930aa..21b4b0a 100644
--- a/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.flow
+++ b/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.flow
@@ -21,9 +21,9 @@ const useDimensionsListener = () => {
       setScreenDimension(screen);
     }
 
-    Dimensions.addEventListener("change", handleDimensionChange);
+    const listener = Dimensions.addEventListener("change", handleDimensionChange);
     return () => {
-      Dimensions.removeEventListener("change", handleDimensionChange);
+      listener.remove();
     };
   }, []);
 
diff --git a/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.map b/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.map
index 64e7709..973800d 100644
--- a/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.map
+++ b/node_modules/react-native-responsive-dimensions/lib/commonjs/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["index.ts"],"names":["useDimensionsListener","Dimensions","get","screenDimension","setScreenDimension","windowDimension","setWindowDimension","handleDimensionChange","window","screen","addEventListener","removeEventListener","percentageCalculation","max","val","fontCalculation","height","width","widthDimension","aspectRatioBasedHeight","Math","sqrt","pow","useDimensionsChange","effect","hasMountRef","dimensions","current","destroy","cleanUp","responsiveHeight","h","responsiveWidth","w","responsiveFontSize","f","responsiveScreenHeight","responsiveScreenWidth","responsiveScreenFontSize","useResponsiveHeight","useResponsiveWidth","useResponsiveFontSize","useResponsiveScreenHeight","useResponsiveScreenWidth","useResponsiveScreenFontSize"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nconst useDimensionsListener = () => {\n  const [screenDimension, setScreenDimension] = useState(\n    Dimensions.get(\"screen\")\n  );\n  const [windowDimension, setWindowDimension] = useState(\n    Dimensions.get(\"window\")\n  );\n\n  useEffect(() => {\n    function handleDimensionChange({\n      window,\n      screen\n    }: {\n      window: ScaledSize;\n      screen: ScaledSize;\n    }) {\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    Dimensions.addEventListener(\"change\", handleDimensionChange);\n    return () => {\n      Dimensions.removeEventListener(\"change\", handleDimensionChange);\n    };\n  }, []);\n\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\ntype EffectParams = {\n  screen: ScaledSize;\n  window: ScaledSize;\n};\n\ntype EffectCallback =\n  | ((opts: EffectParams) => () => any)\n  | ((opts: EffectParams) => undefined)\n  | ((opts: EffectParams) => void);\n\nconst percentageCalculation = (max: number, val: number) => max * (val / 100);\n\nconst fontCalculation = (height: number, width: number, val: number) => {\n  const widthDimension = height > width ? width : height;\n  const aspectRatioBasedHeight = (16 / 9) * widthDimension;\n  return percentageCalculation(\n    Math.sqrt(\n      Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)\n    ),\n    val\n  );\n};\n\nexport const useDimensionsChange = (effect: EffectCallback) => {\n  const hasMountRef = useRef(false);\n  const dimensions = useDimensionsListener();\n\n  useEffect(() => {\n    if (hasMountRef.current) {\n      const destroy = effect(dimensions);\n      let cleanUp: any = () => null;\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n      return () => cleanUp();\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexport const responsiveHeight = (h: number) => {\n  const { height } = Dimensions.get(\"window\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveWidth = (w: number) => {\n  const { width } = Dimensions.get(\"window\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"window\");\n  return fontCalculation(height, width, f);\n};\n\nexport const responsiveScreenHeight = (h: number) => {\n  const { height } = Dimensions.get(\"screen\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveScreenWidth = (w: number) => {\n  const { width } = Dimensions.get(\"screen\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveScreenFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"screen\");\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveHeight = (h: number) => {\n  const { height } = useDimensionsListener().window;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveWidth = (w: number) => {\n  const { width } = useDimensionsListener().window;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().window;\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveScreenHeight = (h: number) => {\n  const { height } = useDimensionsListener().screen;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveScreenWidth = (w: number) => {\n  const { width } = useDimensionsListener().screen;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveScreenFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().screen;\n  return fontCalculation(height, width, f);\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["_react","require","_reactNative","useDimensionsListener","screenDimension","setScreenDimension","useState","Dimensions","get","windowDimension","setWindowDimension","useEffect","handleDimensionChange","_ref","window","screen","listener","addEventListener","remove","percentageCalculation","max","val","fontCalculation","height","width","widthDimension","aspectRatioBasedHeight","Math","sqrt","pow","useDimensionsChange","effect","hasMountRef","useRef","dimensions","current","destroy","cleanUp","exports","responsiveHeight","h","responsiveWidth","w","responsiveFontSize","f","responsiveScreenHeight","responsiveScreenWidth","responsiveScreenFontSize","useResponsiveHeight","useResponsiveWidth","useResponsiveFontSize","useResponsiveScreenHeight","useResponsiveScreenWidth","useResponsiveScreenFontSize"],"sources":["index.ts"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nconst useDimensionsListener = () => {\n  const [screenDimension, setScreenDimension] = useState(\n    Dimensions.get(\"screen\")\n  );\n  const [windowDimension, setWindowDimension] = useState(\n    Dimensions.get(\"window\")\n  );\n\n  useEffect(() => {\n    function handleDimensionChange({\n      window,\n      screen\n    }: {\n      window: ScaledSize;\n      screen: ScaledSize;\n    }) {\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    const listener = Dimensions.addEventListener(\"change\", handleDimensionChange);\n    return () => {\n      listener.remove();\n    };\n  }, []);\n\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\ntype EffectParams = {\n  screen: ScaledSize;\n  window: ScaledSize;\n};\n\ntype EffectCallback =\n  | ((opts: EffectParams) => () => any)\n  | ((opts: EffectParams) => undefined)\n  | ((opts: EffectParams) => void);\n\nconst percentageCalculation = (max: number, val: number) => max * (val / 100);\n\nconst fontCalculation = (height: number, width: number, val: number) => {\n  const widthDimension = height > width ? width : height;\n  const aspectRatioBasedHeight = (16 / 9) * widthDimension;\n  return percentageCalculation(\n    Math.sqrt(\n      Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)\n    ),\n    val\n  );\n};\n\nexport const useDimensionsChange = (effect: EffectCallback) => {\n  const hasMountRef = useRef(false);\n  const dimensions = useDimensionsListener();\n\n  useEffect(() => {\n    if (hasMountRef.current) {\n      const destroy = effect(dimensions);\n      let cleanUp: any = () => null;\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n      return () => cleanUp();\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexport const responsiveHeight = (h: number) => {\n  const { height } = Dimensions.get(\"window\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveWidth = (w: number) => {\n  const { width } = Dimensions.get(\"window\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"window\");\n  return fontCalculation(height, width, f);\n};\n\nexport const responsiveScreenHeight = (h: number) => {\n  const { height } = Dimensions.get(\"screen\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveScreenWidth = (w: number) => {\n  const { width } = Dimensions.get(\"screen\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveScreenFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"screen\");\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveHeight = (h: number) => {\n  const { height } = useDimensionsListener().window;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveWidth = (w: number) => {\n  const { width } = useDimensionsListener().window;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().window;\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveScreenHeight = (h: number) => {\n  const { height } = useDimensionsListener().screen;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveScreenWidth = (w: number) => {\n  const { width } = useDimensionsListener().screen;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveScreenFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().screen;\n  return fontCalculation(height, width, f);\n};\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/react-native-responsive-dimensions/lib/module/index.js b/node_modules/react-native-responsive-dimensions/lib/module/index.js
index e627a03..c02096e 100644
--- a/node_modules/react-native-responsive-dimensions/lib/module/index.js
+++ b/node_modules/react-native-responsive-dimensions/lib/module/index.js
@@ -1,2 +1,123 @@
-var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.useResponsiveScreenFontSize=exports.useResponsiveScreenWidth=exports.useResponsiveScreenHeight=exports.useResponsiveFontSize=exports.useResponsiveWidth=exports.useResponsiveHeight=exports.responsiveScreenFontSize=exports.responsiveScreenWidth=exports.responsiveScreenHeight=exports.responsiveFontSize=exports.responsiveWidth=exports.responsiveHeight=exports.useDimensionsChange=void 0;var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react=require("react");var _reactNative=require("react-native");var useDimensionsListener=function useDimensionsListener(){var _useState=(0,_react.useState)(_reactNative.Dimensions.get("screen")),_useState2=(0,_slicedToArray2.default)(_useState,2),screenDimension=_useState2[0],setScreenDimension=_useState2[1];var _useState3=(0,_react.useState)(_reactNative.Dimensions.get("window")),_useState4=(0,_slicedToArray2.default)(_useState3,2),windowDimension=_useState4[0],setWindowDimension=_useState4[1];(0,_react.useEffect)(function(){function handleDimensionChange(_ref){var window=_ref.window,screen=_ref.screen;setWindowDimension(window);setScreenDimension(screen);}_reactNative.Dimensions.addEventListener("change",handleDimensionChange);return function(){_reactNative.Dimensions.removeEventListener("change",handleDimensionChange);};},[]);return{screen:screenDimension,window:windowDimension};};var percentageCalculation=function percentageCalculation(max,val){return max*(val/100);};var fontCalculation=function fontCalculation(height,width,val){var widthDimension=height>width?width:height;var aspectRatioBasedHeight=16/9*widthDimension;return percentageCalculation(Math.sqrt(Math.pow(aspectRatioBasedHeight,2)+Math.pow(widthDimension,2)),val);};var useDimensionsChange=function useDimensionsChange(effect){var hasMountRef=(0,_react.useRef)(false);var dimensions=useDimensionsListener();(0,_react.useEffect)(function(){if(hasMountRef.current){var destroy=effect(dimensions);var cleanUp=function cleanUp(){return null;};if(typeof destroy==="function"){cleanUp=destroy;}return function(){return cleanUp();};}else{hasMountRef.current=true;}},[dimensions,effect]);};exports.useDimensionsChange=useDimensionsChange;var responsiveHeight=function responsiveHeight(h){var _Dimensions$get=_reactNative.Dimensions.get("window"),height=_Dimensions$get.height;return percentageCalculation(height,h);};exports.responsiveHeight=responsiveHeight;var responsiveWidth=function responsiveWidth(w){var _Dimensions$get2=_reactNative.Dimensions.get("window"),width=_Dimensions$get2.width;return percentageCalculation(width,w);};exports.responsiveWidth=responsiveWidth;var responsiveFontSize=function responsiveFontSize(f){var _Dimensions$get3=_reactNative.Dimensions.get("window"),height=_Dimensions$get3.height,width=_Dimensions$get3.width;return fontCalculation(height,width,f);};exports.responsiveFontSize=responsiveFontSize;var responsiveScreenHeight=function responsiveScreenHeight(h){var _Dimensions$get4=_reactNative.Dimensions.get("screen"),height=_Dimensions$get4.height;return percentageCalculation(height,h);};exports.responsiveScreenHeight=responsiveScreenHeight;var responsiveScreenWidth=function responsiveScreenWidth(w){var _Dimensions$get5=_reactNative.Dimensions.get("screen"),width=_Dimensions$get5.width;return percentageCalculation(width,w);};exports.responsiveScreenWidth=responsiveScreenWidth;var responsiveScreenFontSize=function responsiveScreenFontSize(f){var _Dimensions$get6=_reactNative.Dimensions.get("screen"),height=_Dimensions$get6.height,width=_Dimensions$get6.width;return fontCalculation(height,width,f);};exports.responsiveScreenFontSize=responsiveScreenFontSize;var useResponsiveHeight=function useResponsiveHeight(h){var height=useDimensionsListener().window.height;return percentageCalculation(height,h);};exports.useResponsiveHeight=useResponsiveHeight;var useResponsiveWidth=function useResponsiveWidth(w){var width=useDimensionsListener().window.width;return percentageCalculation(width,w);};exports.useResponsiveWidth=useResponsiveWidth;var useResponsiveFontSize=function useResponsiveFontSize(f){var _useDimensionsListene=useDimensionsListener().window,height=_useDimensionsListene.height,width=_useDimensionsListene.width;return fontCalculation(height,width,f);};exports.useResponsiveFontSize=useResponsiveFontSize;var useResponsiveScreenHeight=function useResponsiveScreenHeight(h){var height=useDimensionsListener().screen.height;return percentageCalculation(height,h);};exports.useResponsiveScreenHeight=useResponsiveScreenHeight;var useResponsiveScreenWidth=function useResponsiveScreenWidth(w){var width=useDimensionsListener().screen.width;return percentageCalculation(width,w);};exports.useResponsiveScreenWidth=useResponsiveScreenWidth;var useResponsiveScreenFontSize=function useResponsiveScreenFontSize(f){var _useDimensionsListene2=useDimensionsListener().screen,height=_useDimensionsListene2.height,width=_useDimensionsListene2.width;return fontCalculation(height,width,f);};exports.useResponsiveScreenFontSize=useResponsiveScreenFontSize;
+import { useState, useEffect, useRef } from "react";
+import { Dimensions } from "react-native";
+const useDimensionsListener = () => {
+  const [screenDimension, setScreenDimension] = useState(Dimensions.get("screen"));
+  const [windowDimension, setWindowDimension] = useState(Dimensions.get("window"));
+  useEffect(() => {
+    function handleDimensionChange(_ref) {
+      let {
+        window,
+        screen
+      } = _ref;
+      setWindowDimension(window);
+      setScreenDimension(screen);
+    }
+    const listener = Dimensions.addEventListener("change", handleDimensionChange);
+    return () => {
+      listener.remove();
+    };
+  }, []);
+  return {
+    screen: screenDimension,
+    window: windowDimension
+  };
+};
+const percentageCalculation = (max, val) => max * (val / 100);
+const fontCalculation = (height, width, val) => {
+  const widthDimension = height > width ? width : height;
+  const aspectRatioBasedHeight = 16 / 9 * widthDimension;
+  return percentageCalculation(Math.sqrt(Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)), val);
+};
+export const useDimensionsChange = effect => {
+  const hasMountRef = useRef(false);
+  const dimensions = useDimensionsListener();
+  useEffect(() => {
+    if (hasMountRef.current) {
+      const destroy = effect(dimensions);
+      let cleanUp = () => null;
+      if (typeof destroy === "function") {
+        cleanUp = destroy;
+      }
+      return () => cleanUp();
+    } else {
+      hasMountRef.current = true;
+    }
+  }, [dimensions, effect]);
+};
+export const responsiveHeight = h => {
+  const {
+    height
+  } = Dimensions.get("window");
+  return percentageCalculation(height, h);
+};
+export const responsiveWidth = w => {
+  const {
+    width
+  } = Dimensions.get("window");
+  return percentageCalculation(width, w);
+};
+export const responsiveFontSize = f => {
+  const {
+    height,
+    width
+  } = Dimensions.get("window");
+  return fontCalculation(height, width, f);
+};
+export const responsiveScreenHeight = h => {
+  const {
+    height
+  } = Dimensions.get("screen");
+  return percentageCalculation(height, h);
+};
+export const responsiveScreenWidth = w => {
+  const {
+    width
+  } = Dimensions.get("screen");
+  return percentageCalculation(width, w);
+};
+export const responsiveScreenFontSize = f => {
+  const {
+    height,
+    width
+  } = Dimensions.get("screen");
+  return fontCalculation(height, width, f);
+};
+export const useResponsiveHeight = h => {
+  const {
+    height
+  } = useDimensionsListener().window;
+  return percentageCalculation(height, h);
+};
+export const useResponsiveWidth = w => {
+  const {
+    width
+  } = useDimensionsListener().window;
+  return percentageCalculation(width, w);
+};
+export const useResponsiveFontSize = f => {
+  const {
+    height,
+    width
+  } = useDimensionsListener().window;
+  return fontCalculation(height, width, f);
+};
+export const useResponsiveScreenHeight = h => {
+  const {
+    height
+  } = useDimensionsListener().screen;
+  return percentageCalculation(height, h);
+};
+export const useResponsiveScreenWidth = w => {
+  const {
+    width
+  } = useDimensionsListener().screen;
+  return percentageCalculation(width, w);
+};
+export const useResponsiveScreenFontSize = f => {
+  const {
+    height,
+    width
+  } = useDimensionsListener().screen;
+  return fontCalculation(height, width, f);
+};
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-responsive-dimensions/lib/module/index.js.map b/node_modules/react-native-responsive-dimensions/lib/module/index.js.map
index f809198..be4db00 100644
--- a/node_modules/react-native-responsive-dimensions/lib/module/index.js.map
+++ b/node_modules/react-native-responsive-dimensions/lib/module/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["index.ts"],"names":["useDimensionsListener","Dimensions","get","screenDimension","setScreenDimension","windowDimension","setWindowDimension","handleDimensionChange","window","screen","addEventListener","removeEventListener","percentageCalculation","max","val","fontCalculation","height","width","widthDimension","aspectRatioBasedHeight","Math","sqrt","pow","useDimensionsChange","effect","hasMountRef","dimensions","current","destroy","cleanUp","responsiveHeight","h","responsiveWidth","w","responsiveFontSize","f","responsiveScreenHeight","responsiveScreenWidth","responsiveScreenFontSize","useResponsiveHeight","useResponsiveWidth","useResponsiveFontSize","useResponsiveScreenHeight","useResponsiveScreenWidth","useResponsiveScreenFontSize"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nconst useDimensionsListener = () => {\n  const [screenDimension, setScreenDimension] = useState(\n    Dimensions.get(\"screen\")\n  );\n  const [windowDimension, setWindowDimension] = useState(\n    Dimensions.get(\"window\")\n  );\n\n  useEffect(() => {\n    function handleDimensionChange({\n      window,\n      screen\n    }: {\n      window: ScaledSize;\n      screen: ScaledSize;\n    }) {\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    Dimensions.addEventListener(\"change\", handleDimensionChange);\n    return () => {\n      Dimensions.removeEventListener(\"change\", handleDimensionChange);\n    };\n  }, []);\n\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\ntype EffectParams = {\n  screen: ScaledSize;\n  window: ScaledSize;\n};\n\ntype EffectCallback =\n  | ((opts: EffectParams) => () => any)\n  | ((opts: EffectParams) => undefined)\n  | ((opts: EffectParams) => void);\n\nconst percentageCalculation = (max: number, val: number) => max * (val / 100);\n\nconst fontCalculation = (height: number, width: number, val: number) => {\n  const widthDimension = height > width ? width : height;\n  const aspectRatioBasedHeight = (16 / 9) * widthDimension;\n  return percentageCalculation(\n    Math.sqrt(\n      Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)\n    ),\n    val\n  );\n};\n\nexport const useDimensionsChange = (effect: EffectCallback) => {\n  const hasMountRef = useRef(false);\n  const dimensions = useDimensionsListener();\n\n  useEffect(() => {\n    if (hasMountRef.current) {\n      const destroy = effect(dimensions);\n      let cleanUp: any = () => null;\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n      return () => cleanUp();\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexport const responsiveHeight = (h: number) => {\n  const { height } = Dimensions.get(\"window\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveWidth = (w: number) => {\n  const { width } = Dimensions.get(\"window\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"window\");\n  return fontCalculation(height, width, f);\n};\n\nexport const responsiveScreenHeight = (h: number) => {\n  const { height } = Dimensions.get(\"screen\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveScreenWidth = (w: number) => {\n  const { width } = Dimensions.get(\"screen\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveScreenFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"screen\");\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveHeight = (h: number) => {\n  const { height } = useDimensionsListener().window;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveWidth = (w: number) => {\n  const { width } = useDimensionsListener().window;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().window;\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveScreenHeight = (h: number) => {\n  const { height } = useDimensionsListener().screen;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveScreenWidth = (w: number) => {\n  const { width } = useDimensionsListener().screen;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveScreenFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().screen;\n  return fontCalculation(height, width, f);\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["useState","useEffect","useRef","Dimensions","useDimensionsListener","screenDimension","setScreenDimension","get","windowDimension","setWindowDimension","handleDimensionChange","_ref","window","screen","listener","addEventListener","remove","percentageCalculation","max","val","fontCalculation","height","width","widthDimension","aspectRatioBasedHeight","Math","sqrt","pow","useDimensionsChange","effect","hasMountRef","dimensions","current","destroy","cleanUp","responsiveHeight","h","responsiveWidth","w","responsiveFontSize","f","responsiveScreenHeight","responsiveScreenWidth","responsiveScreenFontSize","useResponsiveHeight","useResponsiveWidth","useResponsiveFontSize","useResponsiveScreenHeight","useResponsiveScreenWidth","useResponsiveScreenFontSize"],"sources":["index.ts"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nconst useDimensionsListener = () => {\n  const [screenDimension, setScreenDimension] = useState(\n    Dimensions.get(\"screen\")\n  );\n  const [windowDimension, setWindowDimension] = useState(\n    Dimensions.get(\"window\")\n  );\n\n  useEffect(() => {\n    function handleDimensionChange({\n      window,\n      screen\n    }: {\n      window: ScaledSize;\n      screen: ScaledSize;\n    }) {\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    const listener = Dimensions.addEventListener(\"change\", handleDimensionChange);\n    return () => {\n      listener.remove();\n    };\n  }, []);\n\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\ntype EffectParams = {\n  screen: ScaledSize;\n  window: ScaledSize;\n};\n\ntype EffectCallback =\n  | ((opts: EffectParams) => () => any)\n  | ((opts: EffectParams) => undefined)\n  | ((opts: EffectParams) => void);\n\nconst percentageCalculation = (max: number, val: number) => max * (val / 100);\n\nconst fontCalculation = (height: number, width: number, val: number) => {\n  const widthDimension = height > width ? width : height;\n  const aspectRatioBasedHeight = (16 / 9) * widthDimension;\n  return percentageCalculation(\n    Math.sqrt(\n      Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)\n    ),\n    val\n  );\n};\n\nexport const useDimensionsChange = (effect: EffectCallback) => {\n  const hasMountRef = useRef(false);\n  const dimensions = useDimensionsListener();\n\n  useEffect(() => {\n    if (hasMountRef.current) {\n      const destroy = effect(dimensions);\n      let cleanUp: any = () => null;\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n      return () => cleanUp();\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexport const responsiveHeight = (h: number) => {\n  const { height } = Dimensions.get(\"window\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveWidth = (w: number) => {\n  const { width } = Dimensions.get(\"window\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"window\");\n  return fontCalculation(height, width, f);\n};\n\nexport const responsiveScreenHeight = (h: number) => {\n  const { height } = Dimensions.get(\"screen\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveScreenWidth = (w: number) => {\n  const { width } = Dimensions.get(\"screen\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveScreenFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"screen\");\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveHeight = (h: number) => {\n  const { height } = useDimensionsListener().window;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveWidth = (w: number) => {\n  const { width } = useDimensionsListener().window;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().window;\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveScreenHeight = (h: number) => {\n  const { height } = useDimensionsListener().screen;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveScreenWidth = (w: number) => {\n  const { width } = useDimensionsListener().screen;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveScreenFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().screen;\n  return fontCalculation(height, width, f);\n};\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/react-native-responsive-dimensions/src/index.ts b/node_modules/react-native-responsive-dimensions/src/index.ts
index a0930aa..21b4b0a 100644
--- a/node_modules/react-native-responsive-dimensions/src/index.ts
+++ b/node_modules/react-native-responsive-dimensions/src/index.ts
@@ -21,9 +21,9 @@ const useDimensionsListener = () => {
       setScreenDimension(screen);
     }
 
-    Dimensions.addEventListener("change", handleDimensionChange);
+    const listener = Dimensions.addEventListener("change", handleDimensionChange);
     return () => {
-      Dimensions.removeEventListener("change", handleDimensionChange);
+      listener.remove();
     };
   }, []);
 
