diff --git a/RNFastImage.podspec b/RNFastImage.podspec
index db0fada63fc06191f8620d336d244edde6c3dba3..daf6e1dfb6028d509c4384a994bb941f844f0cfe 100644
--- a/RNFastImage.podspec
+++ b/RNFastImage.podspec
@@ -16,6 +16,6 @@ Pod::Spec.new do |s|
   s.source_files  = "ios/**/*.{h,m}"
 
   s.dependency 'React-Core'
-  s.dependency 'SDWebImage', '~> 5.11.1'
-  s.dependency 'SDWebImageWebPCoder', '~> 0.8.4'
+  s.dependency 'SDWebImage', '~> 5.18'
+  s.dependency 'SDWebImageWebPCoder', '~> 0.14'
 end
diff --git a/android/build.gradle b/android/build.gradle
index 5b21cd59c40a5754f5d19c77e2a0eb0229925911..2e197635a083b09b7a59a06d6fb7b401e6ce11b5 100644
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -20,6 +20,11 @@ buildscript {
 apply plugin: 'com.android.library'
 
 android {
+    def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
+    if (agpVersion.tokenize('.')[0].toInteger() >= 7) {
+      namespace "com.dylanvann.fastimage"
+    }
+
     compileSdkVersion safeExtGet('compileSdkVersion', 28)
     buildToolsVersion safeExtGet('buildToolsVersion', '28.0.3')
     defaultConfig {
diff --git a/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java b/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java
index dbeb813130313e2308eac44dde65db83c3f49d88..42ce0f0bc4cad0a2471bf7c34e5b149384f93f48 100644
--- a/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java
+++ b/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java
@@ -7,10 +7,15 @@ import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.ImageViewTarget;
 import com.bumptech.glide.request.target.Target;
+import com.dylanvann.fastimage.events.FastImageErrorEvent;
+import com.dylanvann.fastimage.events.FastImageLoadEndEvent;
+import com.dylanvann.fastimage.events.FastImageLoadEvent;
+import com.dylanvann.fastimage.events.FastImageProgressEvent;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.bridge.WritableNativeMap;
 import com.facebook.react.uimanager.ThemedReactContext;
-import com.facebook.react.uimanager.events.RCTEventEmitter;
+import com.facebook.react.uimanager.UIManagerHelper;
+import com.facebook.react.uimanager.events.EventDispatcher;
 
 public class FastImageRequestListener implements RequestListener<Drawable> {
     static final String REACT_ON_ERROR_EVENT = "onFastImageError";
@@ -37,10 +42,15 @@ public class FastImageRequestListener implements RequestListener<Drawable> {
         }
         FastImageViewWithUrl view = (FastImageViewWithUrl) ((ImageViewTarget) target).getView();
         ThemedReactContext context = (ThemedReactContext) view.getContext();
-        RCTEventEmitter eventEmitter = context.getJSModule(RCTEventEmitter.class);
-        int viewId = view.getId();
-        eventEmitter.receiveEvent(viewId, REACT_ON_ERROR_EVENT, new WritableNativeMap());
-        eventEmitter.receiveEvent(viewId, REACT_ON_LOAD_END_EVENT, new WritableNativeMap());
+
+        EventDispatcher dispatcher = UIManagerHelper.getEventDispatcherForReactTag(context, view.getId());
+        int surfaceId = UIManagerHelper.getSurfaceId(view);
+
+        if (dispatcher != null) {
+            dispatcher.dispatchEvent(new FastImageErrorEvent(surfaceId, view.getId(), null));
+            dispatcher.dispatchEvent(new FastImageLoadEndEvent(surfaceId, view.getId()));
+        }
+
         return false;
     }
 
@@ -51,10 +61,15 @@ public class FastImageRequestListener implements RequestListener<Drawable> {
         }
         FastImageViewWithUrl view = (FastImageViewWithUrl) ((ImageViewTarget) target).getView();
         ThemedReactContext context = (ThemedReactContext) view.getContext();
-        RCTEventEmitter eventEmitter = context.getJSModule(RCTEventEmitter.class);
-        int viewId = view.getId();
-        eventEmitter.receiveEvent(viewId, REACT_ON_LOAD_EVENT, mapFromResource(resource));
-        eventEmitter.receiveEvent(viewId, REACT_ON_LOAD_END_EVENT, new WritableNativeMap());
+
+        EventDispatcher dispatcher = UIManagerHelper.getEventDispatcherForReactTag(context, view.getId());
+        int surfaceId = UIManagerHelper.getSurfaceId(view);
+
+        if (dispatcher != null) {
+            dispatcher.dispatchEvent(new FastImageLoadEvent(surfaceId, view.getId()));
+            dispatcher.dispatchEvent(new FastImageLoadEndEvent(surfaceId, view.getId()));
+        }
+
         return false;
     }
 }
diff --git a/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java b/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
index c7a795471c8f8b48163c778836406bc5ead75dab..964a7ce4f677fb588c8e48c8a43f4ce9884382d8 100644
--- a/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
+++ b/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
@@ -14,14 +14,19 @@ import androidx.annotation.NonNull;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
+import com.dylanvann.fastimage.events.FastImageProgressEvent;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.bridge.WritableNativeMap;
 import com.facebook.react.common.MapBuilder;
 import com.facebook.react.uimanager.SimpleViewManager;
 import com.facebook.react.uimanager.ThemedReactContext;
+import com.facebook.react.uimanager.UIManagerHelper;
 import com.facebook.react.uimanager.annotations.ReactProp;
-import com.facebook.react.uimanager.events.RCTEventEmitter;
+import com.facebook.react.uimanager.common.ViewUtil;
+import com.facebook.react.uimanager.events.EventDispatcher;
 import com.facebook.react.views.imagehelper.ResourceDrawableIdHelper;
 
 import java.util.List;
@@ -117,13 +122,17 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
         List<FastImageViewWithUrl> viewsForKey = VIEWS_FOR_URLS.get(key);
         if (viewsForKey != null) {
             for (FastImageViewWithUrl view : viewsForKey) {
-                WritableMap event = new WritableNativeMap();
-                event.putInt("loaded", (int) bytesRead);
-                event.putInt("total", (int) expectedLength);
-                ThemedReactContext context = (ThemedReactContext) view.getContext();
-                RCTEventEmitter eventEmitter = context.getJSModule(RCTEventEmitter.class);
-                int viewId = view.getId();
-                eventEmitter.receiveEvent(viewId, REACT_ON_PROGRESS_EVENT, event);
+                ReactContext context = getReactApplicationContext();
+                EventDispatcher dispatcher = UIManagerHelper.getEventDispatcherForReactTag(context, view.getId());
+                FastImageProgressEvent event = new FastImageProgressEvent(
+                        ViewUtil.NO_SURFACE_ID,
+                        view.getId(),
+                        (int) bytesRead,
+                        (int) expectedLength);
+
+                if (dispatcher != null) {
+                    dispatcher.dispatchEvent(event);
+                }
             }
         }
     }
diff --git a/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java b/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
index 34fcf898d17d82fd52375e9028b71ad815b9b15b..c45b628b04e015c93babac25837d18e10eb084ef 100644
--- a/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
+++ b/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
@@ -13,11 +13,12 @@ import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.request.Request;
+import com.dylanvann.fastimage.events.FastImageErrorEvent;
+import com.dylanvann.fastimage.events.FastImageLoadStartEvent;
 import com.facebook.react.bridge.ReadableMap;
-import com.facebook.react.bridge.WritableMap;
-import com.facebook.react.bridge.WritableNativeMap;
 import com.facebook.react.uimanager.ThemedReactContext;
-import com.facebook.react.uimanager.events.RCTEventEmitter;
+import com.facebook.react.uimanager.UIManagerHelper;
+import com.facebook.react.uimanager.events.EventDispatcher;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -81,11 +82,14 @@ class FastImageViewWithUrl extends AppCompatImageView {
 
         if (imageSource != null && imageSource.getUri().toString().length() == 0) {
             ThemedReactContext context = (ThemedReactContext) getContext();
-            RCTEventEmitter eventEmitter = context.getJSModule(RCTEventEmitter.class);
-            int viewId = getId();
-            WritableMap event = new WritableNativeMap();
-            event.putString("message", "Invalid source prop:" + mSource);
-            eventEmitter.receiveEvent(viewId, REACT_ON_ERROR_EVENT, event);
+
+            EventDispatcher dispatcher = UIManagerHelper.getEventDispatcherForReactTag(context, getId());
+            int surfaceId = UIManagerHelper.getSurfaceId(this);
+            FastImageErrorEvent event = new FastImageErrorEvent(surfaceId, getId(), mSource);
+
+            if (dispatcher != null) {
+                dispatcher.dispatchEvent(event);
+            }
 
             // Cancel existing requests.
             clearView(requestManager);
@@ -120,13 +124,14 @@ class FastImageViewWithUrl extends AppCompatImageView {
 
         ThemedReactContext context = (ThemedReactContext) getContext();
         if (imageSource != null) {
-            // This is an orphan even without a load/loadend when only loading a placeholder
-            RCTEventEmitter eventEmitter = context.getJSModule(RCTEventEmitter.class);
-            int viewId = this.getId();
+            // This is an orphan event without a load/loadend when only loading a placeholder
+            EventDispatcher dispatcher = UIManagerHelper.getEventDispatcherForReactTag(context, getId());
+            int surfaceId = UIManagerHelper.getSurfaceId(this);
+            FastImageLoadStartEvent event = new FastImageLoadStartEvent(surfaceId, getId());
 
-            eventEmitter.receiveEvent(viewId,
-                    FastImageViewManager.REACT_ON_LOAD_START_EVENT,
-                    new WritableNativeMap());
+            if (dispatcher != null) {
+                dispatcher.dispatchEvent(event);
+            }
         }
 
         if (requestManager != null) {
diff --git a/android/src/main/java/com/dylanvann/fastimage/events/FastImageErrorEvent.java b/android/src/main/java/com/dylanvann/fastimage/events/FastImageErrorEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a3afa5b703321273dbd4dfc52fdded0374ad44fa
--- /dev/null
+++ b/android/src/main/java/com/dylanvann/fastimage/events/FastImageErrorEvent.java
@@ -0,0 +1,34 @@
+package com.dylanvann.fastimage.events;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.uimanager.events.Event;
+
+public class FastImageErrorEvent extends Event<FastImageErrorEvent> {
+
+  @Nullable
+  private final ReadableMap mSource;
+
+  public FastImageErrorEvent(int surfaceId, int viewTag, @Nullable ReadableMap source) {
+    super(surfaceId, viewTag);
+    mSource = source;
+  }
+  @NonNull
+  @Override
+  public String getEventName() {
+    return "onFastImageError";
+  }
+
+  @Override
+  protected WritableMap getEventData() {
+    WritableMap eventData = Arguments.createMap();
+    if (mSource != null) {
+      eventData.putString("message", "Invalid source prop:" + mSource);
+    }
+    return eventData;
+  }
+}
diff --git a/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadEndEvent.java b/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadEndEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e85efb33b4cfad6dab9ca424886eec3bfe03e805
--- /dev/null
+++ b/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadEndEvent.java
@@ -0,0 +1,19 @@
+package com.dylanvann.fastimage.events;
+
+import androidx.annotation.NonNull;
+
+import com.facebook.react.uimanager.events.Event;
+
+public class FastImageLoadEndEvent extends Event<FastImageLoadEndEvent> {
+
+  public FastImageLoadEndEvent(int surfaceId, int viewTag) {
+    super(surfaceId, viewTag);
+  }
+
+  @NonNull
+  @Override
+  public String getEventName() {
+    return "onFastImageLoadEnd";
+  }
+
+}
diff --git a/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadEvent.java b/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..c29037d4d25d427e017f0a8899933404c0954150
--- /dev/null
+++ b/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadEvent.java
@@ -0,0 +1,19 @@
+package com.dylanvann.fastimage.events;
+
+import androidx.annotation.NonNull;
+
+import com.facebook.react.uimanager.events.Event;
+
+public class FastImageLoadEvent extends Event<FastImageLoadEvent> {
+
+  public FastImageLoadEvent(int surfaceId, int viewTag) {
+    super(surfaceId, viewTag);
+  }
+
+  @NonNull
+  @Override
+  public String getEventName() {
+    return "onFastImageLoad";
+  }
+
+}
diff --git a/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadStartEvent.java b/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadStartEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..2dca758d7955e03639bf3e6b201eb80bbc9985e9
--- /dev/null
+++ b/android/src/main/java/com/dylanvann/fastimage/events/FastImageLoadStartEvent.java
@@ -0,0 +1,19 @@
+package com.dylanvann.fastimage.events;
+
+import androidx.annotation.NonNull;
+
+import com.facebook.react.uimanager.events.Event;
+
+public class FastImageLoadStartEvent extends Event<FastImageLoadStartEvent> {
+
+  public FastImageLoadStartEvent(int surfaceId, int viewTag) {
+    super(surfaceId, viewTag);
+  }
+
+  @NonNull
+  @Override
+  public String getEventName() {
+    return "onFastImageLoadStart";
+  }
+
+}
diff --git a/android/src/main/java/com/dylanvann/fastimage/events/FastImageProgressEvent.java b/android/src/main/java/com/dylanvann/fastimage/events/FastImageProgressEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f7f11c86e72ec40fff968471989c0e59f490686
--- /dev/null
+++ b/android/src/main/java/com/dylanvann/fastimage/events/FastImageProgressEvent.java
@@ -0,0 +1,34 @@
+package com.dylanvann.fastimage.events;
+
+import androidx.annotation.NonNull;
+
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.uimanager.events.Event;
+
+public class FastImageProgressEvent extends Event<FastImageProgressEvent> {
+
+  private final int mBytesRead;
+  private final int mExpectedLength;
+
+  public FastImageProgressEvent(int surfaceId, int viewTag, int bytesRead, int expectedLength) {
+    super(surfaceId, viewTag);
+    this.mBytesRead = bytesRead;
+    this.mExpectedLength = expectedLength;
+  }
+
+  @NonNull
+  @Override
+  public String getEventName() {
+    return "onFastImageProgress";
+  }
+
+  @Override
+  protected WritableMap getEventData() {
+    WritableMap eventData = Arguments.createMap();
+    eventData.putInt("loaded", mBytesRead);
+    eventData.putInt("total", mExpectedLength);
+    return eventData;
+  }
+
+}
diff --git a/ios/FastImage/FFFastImageView.m b/ios/FastImage/FFFastImageView.m
index f7100815e652539b29b1fa70ff1477c5f5db08dc..54f0a05b58770f678e31861a1a57382bb2fd2011 100644
--- a/ios/FastImage/FFFastImageView.m
+++ b/ios/FastImage/FFFastImageView.m
@@ -71,13 +71,13 @@ - (void) setImageColor: (UIColor*)imageColor {
     }
 }
 
-- (UIImage*) makeImage: (UIImage*)image withTint: (UIColor*)color {
-    UIImage* newImage = [image imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
-    UIGraphicsBeginImageContextWithOptions(image.size, NO, newImage.scale);
-    [color set];
-    [newImage drawInRect: CGRectMake(0, 0, image.size.width, newImage.size.height)];
-    newImage = UIGraphicsGetImageFromCurrentImageContext();
-    UIGraphicsEndImageContext();
+- (UIImage*)makeImage:(UIImage *)image withTint:(UIColor *)color {
+    UIImage *newImage = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
+    UIGraphicsImageRenderer *renderer = [[UIGraphicsImageRenderer alloc] initWithSize:image.size];
+    newImage = [renderer imageWithActions:^(UIGraphicsImageRendererContext * _Nonnull rendererContext) {
+        [color setFill];
+        [newImage drawInRect:CGRectMake(0, 0, image.size.width, newImage.size.height)];
+    }];
     return newImage;
 }
 
